<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eindhoven University of Technology (TU/e)" creationDateTime="1970-01-01T01:00:00" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="Untitled1">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="STATE">
        <baseType>
          <struct>
            <variable name="curTime">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HPC1_HWPump1_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HPC1_HWPump1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HPC1_HWPump2_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HPC1_HWPump2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HPC1_HWSensorS1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HPC1_HWSensorS2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HPC1_HWSensorS3">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HPC1_HWSensorS4">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HPC1_HWSensorS5">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ControlButtonAuto_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ControlButtonAuto">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ControlButtonManual_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ControlButtonManual">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ControlMode_AUTO">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ControlMode">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1Mode_DRAIN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1Mode_STORE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1Mode_OFF">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1Mode">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ModeButtonDrain_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ModeButtonDrain">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ModeButtonOff_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ModeButtonOff">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ModeButtonStore_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWHPC1ModeButtonStore">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWModeTraffictube1Observer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWModeTraffictube2Observer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCControlButtonAuto_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCControlButtonAuto">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCControlButtonManual_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCControlButtonManual">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCControlMode_AUTO">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCControlMode">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCMode_DRAIN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCMode_STORE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCMode_OFF">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCMode">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCModeButtonDrain_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCModeButtonDrain">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCModeButtonOff_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCModeButtonOff">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCModeButtonStore_StopLoop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMPCModeButtonStore">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex1_Here">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex1_SendingAway">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex2_Here">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex2_SendingAway">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex3_Here">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex3_SendingAway">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex3">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex4_Here">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex4_SendingAway">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HWMutex4">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWPomprichting_HPC1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWPomprichting">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWPump1_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWPump1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWPump2_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWPump2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWSensorS1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWSensorS2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWSensorS3">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWSensorS4">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_MPC_HWSensorS5">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Mutex1Home_TokenTracker">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Mutex2Home_TokenTracker">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Mutex3Home_TokenTracker">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Mutex4Home_TokenTracker">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonAuto">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonDrain">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonManual">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonOff">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonStore">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Mode">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Pump1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_Pump2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonAuto">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonDrain">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonManual">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonOff">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonStore">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Mode">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Pump1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_Pump2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_PumpDirection">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_RequirementStateEvtExcls">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup1a">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup4">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup5">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup8">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="enum_E">
        <baseType>
          <enum>
            <values>
              <value name="elit_auto"/>
              <value name="elit_autoPressed"/>
              <value name="elit_Away"/>
              <value name="elit_drain"/>
              <value name="elit_drainPressed"/>
              <value name="elit_emergency"/>
              <value name="elit_Empty"/>
              <value name="elit_headPumpcellar1"/>
              <value name="elit_headPumpcellar2"/>
              <value name="elit_Home"/>
              <value name="elit_IdleHere"/>
              <value name="elit_IdleNotHere"/>
              <value name="elit_manual"/>
              <value name="elit_manualPressed"/>
              <value name="elit_off"/>
              <value name="elit_offPressed"/>
              <value name="elit_on"/>
              <value name="elit_operational"/>
              <value name="elit_recovery"/>
              <value name="elit_S1"/>
              <value name="elit_S2"/>
              <value name="elit_S3"/>
              <value name="elit_S4"/>
              <value name="elit_S5"/>
              <value name="elit_Sending"/>
              <value name="elit_store"/>
              <value name="elit_storePressed"/>
              <value name="elit_unpressed"/>
              <value name="elit_X"/>
            </values>
          </enum>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="alg_MPCStoreAllowed" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_MPCStoreAllowed := ((((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) OR (((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) &lt;&gt; (elit_autoPressed)))) AND ((((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_auto)) AND (NOT(((state.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational)) AND ((state.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational))))) OR (((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed))))) AND (((state.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain)) OR ((state.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_MPCDrainAllowed" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_MPCDrainAllowed := ((((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) OR (((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) &lt;&gt; (elit_autoPressed)))) AND ((((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_auto)) AND (((state.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational)) AND ((state.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational)))) OR (((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed))))) AND (((state.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store)) OR ((state.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_MPCOffAllowed" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_MPCOffAllowed := ((((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) OR (((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) &lt;&gt; (elit_autoPressed)))) AND (((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed)))) AND (((state.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain)) OR ((state.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_HPC1StoreAllowed" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_HPC1StoreAllowed := ((((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) OR (((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) &lt;&gt; (elit_autoPressed)))) AND ((((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_auto)) AND (NOT(((state.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational)) AND ((state.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational))))) OR (((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed))))) AND (((state.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain)) OR ((state.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_HPC1DrainAllowed" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_HPC1DrainAllowed := ((((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) OR (((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) &lt;&gt; (elit_autoPressed)))) AND ((((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_auto)) AND (((state.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational)) AND ((state.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational)))) OR (((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed))))) AND (((state.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store)) OR ((state.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_HPC1OffAllowed" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_HPC1OffAllowed := ((((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) OR (((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) &lt;&gt; (elit_autoPressed)))) AND (((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed)))) AND (((state.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain)) OR ((state.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_Mutex1HomeReturnCondition" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_Mutex1HomeReturnCondition := ((NOT(alg_MPCStoreAllowed(state))) AND (NOT(alg_MPCDrainAllowed(state)))) AND (NOT(alg_MPCOffAllowed(state)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_Mutex2HomeReturnCondition" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_Mutex2HomeReturnCondition := ((NOT(alg_MPCStoreAllowed(state))) AND (NOT(alg_MPCDrainAllowed(state)))) AND (NOT(alg_MPCOffAllowed(state)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_Mutex3HomeReturnCondition" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_Mutex3HomeReturnCondition := ((NOT(alg_HPC1StoreAllowed(state))) AND (NOT(alg_HPC1DrainAllowed(state)))) AND (NOT(alg_HPC1OffAllowed(state)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_Mutex4HomeReturnCondition" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_Mutex4HomeReturnCondition := ((NOT(alg_HPC1StoreAllowed(state))) AND (NOT(alg_HPC1DrainAllowed(state)))) AND (NOT(alg_HPC1OffAllowed(state)));</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_Mutex1Home_ReturnCondition" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_Mutex1Home_ReturnCondition := alg_Mutex1HomeReturnCondition(state);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_Mutex2Home_ReturnCondition" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_Mutex2Home_ReturnCondition := alg_Mutex2HomeReturnCondition(state);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_Mutex3Home_ReturnCondition" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_Mutex3Home_ReturnCondition := alg_Mutex3HomeReturnCondition(state);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_Mutex4Home_ReturnCondition" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_Mutex4Home_ReturnCondition := alg_Mutex4HomeReturnCondition(state);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_M_HWMutex1_InitiallyHere" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_M_HWMutex1_InitiallyHere := TRUE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_M_HWMutex2_InitiallyHere" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_M_HWMutex2_InitiallyHere := TRUE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_M_HWMutex3_InitiallyHere" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_M_HWMutex3_InitiallyHere := TRUE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_M_HWMutex4_InitiallyHere" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_M_HWMutex4_InitiallyHere := TRUE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="MAIN" pouType="program">
        <interface>
          <outputVars>
            <variable name="timerValue0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="timerValue1">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="cnt">
              <type>
                <LINT/>
              </type>
            </variable>
            <variable name="first">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="curTimerValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="state0">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
            <variable name="curTime">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="loopsKilled">
              <type>
                <LINT/>
              </type>
            </variable>
          </localVars>
          <tempVars>
            <variable name="lastTimerValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="curDeltaTime">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="curDeltaSecs">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="state1">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
            <variable name="progress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="loopCount">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="b1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="b2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="b3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="b4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="b5">
              <type>
                <BOOL/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
// Handle 'time' and cycle time.
cnt := cnt + 1;

timer0(IN := curTimer = 0, PT := T#1D);
timer1(IN := curTimer = 1, PT := T#1D);
timerValue0 := timer0.ET;
timerValue1 := timer1.ET;

lastTimerValue := curTimerValue;
IF curTimer = 0 THEN
    curTimerValue := timerValue0;
ELSE
    curTimerValue := timerValue1;
END_IF;
curDeltaTime := curTimerValue - lastTimerValue;
curDeltaSecs := TIME_TO_LREAL(curDeltaTime) / 1000;
curTime := curTime + curDeltaSecs;

IF cnt MOD 10 = 0 THEN
    curTimer := 1 - curTimer;
    curTimerValue := T#0S;
    timer0(IN := curTimer = 0, PT := T#1D);
    timer1(IN := curTimer = 1, PT := T#1D);
    timerValue0 := timer0.ET;
    timerValue1 := timer1.ET;
END_IF;

IF first THEN
    first := FALSE;

    // Initialize state variables for initial state.
    state0.dvar_M_HPC1_HWPump1_ON := FALSE;
    state0.dvar_M_HPC1_HWPump1 := elit_X;
    state0.dvar_M_HPC1_HWPump2_ON := FALSE;
    state0.dvar_M_HPC1_HWPump2 := elit_X;
    state0.dvar_M_HPC1_HWSensorS1 := elit_off;
    state0.dvar_M_HPC1_HWSensorS2 := elit_off;
    state0.dvar_M_HPC1_HWSensorS3 := elit_off;
    state0.dvar_M_HPC1_HWSensorS4 := elit_off;
    state0.dvar_M_HPC1_HWSensorS5 := elit_off;
    state0.dvar_M_HWHPC1ControlButtonAuto_StopLoop := FALSE;
    state0.dvar_M_HWHPC1ControlButtonAuto := elit_X;
    state0.dvar_M_HWHPC1ControlButtonManual_StopLoop := FALSE;
    state0.dvar_M_HWHPC1ControlButtonManual := elit_X;
    state0.dvar_M_HWHPC1ControlMode_AUTO := TRUE;
    state0.dvar_M_HWHPC1ControlMode := elit_X;
    state0.dvar_M_HWHPC1Mode_DRAIN := TRUE;
    state0.dvar_M_HWHPC1Mode_STORE := FALSE;
    state0.dvar_M_HWHPC1Mode_OFF := FALSE;
    state0.dvar_M_HWHPC1Mode := elit_drain;
    state0.dvar_M_HWHPC1ModeButtonDrain_StopLoop := FALSE;
    state0.dvar_M_HWHPC1ModeButtonDrain := elit_X;
    state0.dvar_M_HWHPC1ModeButtonOff_StopLoop := FALSE;
    state0.dvar_M_HWHPC1ModeButtonOff := elit_X;
    state0.dvar_M_HWHPC1ModeButtonStore_StopLoop := FALSE;
    state0.dvar_M_HWHPC1ModeButtonStore := elit_X;
    state0.dvar_M_HWModeTraffictube1Observer := elit_X;
    state0.dvar_M_HWModeTraffictube2Observer := elit_X;
    state0.dvar_M_HWMPCControlButtonAuto_StopLoop := FALSE;
    state0.dvar_M_HWMPCControlButtonAuto := elit_X;
    state0.dvar_M_HWMPCControlButtonManual_StopLoop := FALSE;
    state0.dvar_M_HWMPCControlButtonManual := elit_X;
    state0.dvar_M_HWMPCControlMode_AUTO := TRUE;
    state0.dvar_M_HWMPCControlMode := elit_X;
    state0.dvar_M_HWMPCMode_DRAIN := TRUE;
    state0.dvar_M_HWMPCMode_STORE := FALSE;
    state0.dvar_M_HWMPCMode_OFF := FALSE;
    state0.dvar_M_HWMPCMode := elit_drain;
    state0.dvar_M_HWMPCModeButtonDrain_StopLoop := FALSE;
    state0.dvar_M_HWMPCModeButtonDrain := elit_X;
    state0.dvar_M_HWMPCModeButtonOff_StopLoop := FALSE;
    state0.dvar_M_HWMPCModeButtonOff := elit_X;
    state0.dvar_M_HWMPCModeButtonStore_StopLoop := FALSE;
    state0.dvar_M_HWMPCModeButtonStore := elit_X;
    state0.dvar_M_HWMutex1_Here := TRUE;
    state0.dvar_M_HWMutex1_SendingAway := FALSE;
    state0.dvar_M_HWMutex1 := elit_IdleHere;
    state0.dvar_M_HWMutex2_Here := TRUE;
    state0.dvar_M_HWMutex2_SendingAway := FALSE;
    state0.dvar_M_HWMutex2 := elit_IdleHere;
    state0.dvar_M_HWMutex3_Here := TRUE;
    state0.dvar_M_HWMutex3_SendingAway := FALSE;
    state0.dvar_M_HWMutex3 := elit_IdleHere;
    state0.dvar_M_HWMutex4_Here := TRUE;
    state0.dvar_M_HWMutex4_SendingAway := FALSE;
    state0.dvar_M_HWMutex4 := elit_IdleHere;
    state0.dvar_M_MPC_HWPomprichting_HPC1 := TRUE;
    state0.dvar_M_MPC_HWPomprichting := elit_X;
    state0.dvar_M_MPC_HWPump1_ON := FALSE;
    state0.dvar_M_MPC_HWPump1 := elit_X;
    state0.dvar_M_MPC_HWPump2_ON := FALSE;
    state0.dvar_M_MPC_HWPump2 := elit_X;
    state0.dvar_M_MPC_HWSensorS1 := elit_off;
    state0.dvar_M_MPC_HWSensorS2 := elit_off;
    state0.dvar_M_MPC_HWSensorS3 := elit_off;
    state0.dvar_M_MPC_HWSensorS4 := elit_off;
    state0.dvar_M_MPC_HWSensorS5 := elit_off;
    state0.dvar_M_Mutex1Home_TokenTracker := elit_Home;
    state0.dvar_M_Mutex2Home_TokenTracker := elit_Home;
    state0.dvar_M_Mutex3Home_TokenTracker := elit_Home;
    state0.dvar_M_Mutex4Home_TokenTracker := elit_Home;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonAuto := elit_X;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonDrain := elit_X;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonManual := elit_X;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonOff := elit_X;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonStore := elit_X;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode := elit_auto;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode := elit_drain;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1 := elit_off;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2 := elit_off;
    state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_Empty;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonAuto := elit_X;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonDrain := elit_X;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonManual := elit_X;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonOff := elit_X;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonStore := elit_X;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode := elit_auto;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode := elit_drain;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1 := elit_off;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2 := elit_off;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_PumpDirection := elit_headPumpcellar1;
    state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_Empty;
    state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer := elit_operational;
    state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer := elit_operational;
    state0.dvar_M_RequirementStateEvtExcls := elit_X;
    state0.dvar_M_sup1a := elit_X;
    state0.dvar_M_sup2 := elit_X;
    state0.dvar_M_sup4 := elit_X;
    state0.dvar_M_sup5 := elit_X;
    state0.dvar_M_sup8 := elit_X;
ELSE
    // Update continuous variables for time delay.

    state0.curTime := curTime;
END_IF;

// Event loop.
WHILE TRUE DO
    progress := FALSE;

    // Event "M.HWMutex1_c_finishSending".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex1) = (elit_Sending);
        b1 := b1 AND (ivar_M_HWMutex1_There);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex1_SendingAway := FALSE;
            state1.dvar_M_HWMutex1 := elit_IdleNotHere;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "M.HWMutex2_c_finishSending".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex2) = (elit_Sending);
        b1 := b1 AND (ivar_M_HWMutex2_There);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex2_SendingAway := FALSE;
            state1.dvar_M_HWMutex2 := elit_IdleNotHere;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "M.HWMutex3_c_finishSending".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex3) = (elit_Sending);
        b1 := b1 AND (ivar_M_HWMutex3_There);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex3_SendingAway := FALSE;
            state1.dvar_M_HWMutex3 := elit_IdleNotHere;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "M.HWMutex4_c_finishSending".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex4) = (elit_Sending);
        b1 := b1 AND (ivar_M_HWMutex4_There);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex4_SendingAway := FALSE;
            state1.dvar_M_HWMutex4 := elit_IdleNotHere;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Mutex1Home_TokenTracker_c_receive".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex1) = (elit_IdleNotHere);
        b1 := b1 AND (ivar_M_HWMutex1_SendingHere);
        b1 := b1 AND ((state0.dvar_M_Mutex1Home_TokenTracker) = (elit_Away));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex1_Here := TRUE;
            state1.dvar_M_HWMutex1 := elit_IdleHere;
            state1.dvar_M_Mutex1Home_TokenTracker := elit_Home;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Mutex1Home_TokenTracker_c_send".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex1) = (elit_IdleHere);
        b1 := b1 AND ((ivar_M_HWMutex1_SendingHere) = (FALSE));
        b1 := b1 AND (state0.dvar_M_HWMutex1_Here);
        b1 := b1 AND ((state0.dvar_M_Mutex1Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND (alg_Mutex1Home_ReturnCondition(state0));
        b1 := b1 AND (ivar_Mutex1Home_R2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex1_SendingAway := TRUE;
            state1.dvar_M_HWMutex1_Here := FALSE;
            state1.dvar_M_HWMutex1 := elit_Sending;
            state1.dvar_M_Mutex1Home_TokenTracker := elit_Away;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Mutex2Home_TokenTracker_c_receive".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex2) = (elit_IdleNotHere);
        b1 := b1 AND (ivar_M_HWMutex2_SendingHere);
        b1 := b1 AND ((state0.dvar_M_Mutex2Home_TokenTracker) = (elit_Away));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex2_Here := TRUE;
            state1.dvar_M_HWMutex2 := elit_IdleHere;
            state1.dvar_M_Mutex2Home_TokenTracker := elit_Home;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Mutex2Home_TokenTracker_c_send".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex2) = (elit_IdleHere);
        b1 := b1 AND ((ivar_M_HWMutex2_SendingHere) = (FALSE));
        b1 := b1 AND (state0.dvar_M_HWMutex2_Here);
        b1 := b1 AND ((state0.dvar_M_Mutex2Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND (alg_Mutex2Home_ReturnCondition(state0));
        b1 := b1 AND (ivar_Mutex2Home_R2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex2_SendingAway := TRUE;
            state1.dvar_M_HWMutex2_Here := FALSE;
            state1.dvar_M_HWMutex2 := elit_Sending;
            state1.dvar_M_Mutex2Home_TokenTracker := elit_Away;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Mutex3Home_TokenTracker_c_receive".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex3) = (elit_IdleNotHere);
        b1 := b1 AND (ivar_M_HWMutex3_SendingHere);
        b1 := b1 AND ((state0.dvar_M_Mutex3Home_TokenTracker) = (elit_Away));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex3_Here := TRUE;
            state1.dvar_M_HWMutex3 := elit_IdleHere;
            state1.dvar_M_Mutex3Home_TokenTracker := elit_Home;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Mutex3Home_TokenTracker_c_send".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex3) = (elit_IdleHere);
        b1 := b1 AND ((ivar_M_HWMutex3_SendingHere) = (FALSE));
        b1 := b1 AND (state0.dvar_M_HWMutex3_Here);
        b1 := b1 AND ((state0.dvar_M_Mutex3Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND (alg_Mutex3Home_ReturnCondition(state0));
        b1 := b1 AND (ivar_Mutex3Home_R2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex3_SendingAway := TRUE;
            state1.dvar_M_HWMutex3_Here := FALSE;
            state1.dvar_M_HWMutex3 := elit_Sending;
            state1.dvar_M_Mutex3Home_TokenTracker := elit_Away;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Mutex4Home_TokenTracker_c_receive".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex4) = (elit_IdleNotHere);
        b1 := b1 AND (ivar_M_HWMutex4_SendingHere);
        b1 := b1 AND ((state0.dvar_M_Mutex4Home_TokenTracker) = (elit_Away));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex4_Here := TRUE;
            state1.dvar_M_HWMutex4 := elit_IdleHere;
            state1.dvar_M_Mutex4Home_TokenTracker := elit_Home;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Mutex4Home_TokenTracker_c_send".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMutex4) = (elit_IdleHere);
        b1 := b1 AND ((ivar_M_HWMutex4_SendingHere) = (FALSE));
        b1 := b1 AND (state0.dvar_M_HWMutex4_Here);
        b1 := b1 AND ((state0.dvar_M_Mutex4Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND (alg_Mutex4Home_ReturnCondition(state0));
        b1 := b1 AND (ivar_Mutex4Home_R2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMutex4_SendingAway := TRUE;
            state1.dvar_M_HWMutex4_Here := FALSE;
            state1.dvar_M_HWMutex4 := elit_Sending;
            state1.dvar_M_Mutex4Home_TokenTracker := elit_Away;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Control_ButtonAuto_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWHPC1ControlButtonAuto) = (elit_X);
        b1 := b1 AND (ivar_M_HWHPC1ControlButtonAuto_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWHPC1ControlButtonAuto_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonAuto) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b4 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual);
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) &lt;&gt; (elit_manual));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWHPC1ControlButtonAuto_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_autoPressed;
            ELSIF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) &lt;&gt; (elit_manual))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Control_ButtonDrain_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWHPC1ModeButtonDrain) = (elit_X);
        b1 := b1 AND (ivar_M_HWHPC1ModeButtonDrain_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWHPC1ModeButtonDrain_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonDrain) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b5 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual);
                b5 := b5 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_drain));
                b4 := b5;
                b4 := b4 OR (NOT(((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_drain))));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWHPC1ModeButtonDrain_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_drain)))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_drainPressed;
            ELSIF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND (NOT(((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_drain))))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Control_ButtonManual_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWHPC1ControlButtonManual) = (elit_X);
        b1 := b1 AND (ivar_M_HWHPC1ControlButtonManual_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWHPC1ControlButtonManual_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonManual) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b4 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_auto);
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) &lt;&gt; (elit_auto));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWHPC1ControlButtonManual_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_auto))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_manualPressed;
            ELSIF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) &lt;&gt; (elit_auto))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Control_ButtonOff_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWHPC1ModeButtonOff) = (elit_X);
        b1 := b1 AND (ivar_M_HWHPC1ModeButtonOff_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWHPC1ModeButtonOff_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonOff) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b5 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual);
                b5 := b5 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_off));
                b4 := b5;
                b4 := b4 OR (NOT(((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_off))));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWHPC1ModeButtonOff_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_off)))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_offPressed;
            ELSIF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND (NOT(((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_off))))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Control_ButtonStore_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWHPC1ModeButtonStore) = (elit_X);
        b1 := b1 AND (ivar_M_HWHPC1ModeButtonStore_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWHPC1ModeButtonStore_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_ButtonStore) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b5 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual);
                b5 := b5 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_store));
                b4 := b5;
                b4 := b4 OR (NOT(((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_store))));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWHPC1ModeButtonStore_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_store)))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_storePressed;
            ELSIF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed)) AND (NOT(((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) &lt;&gt; (elit_store))))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Control_Mode_c_auto".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWHPC1ControlMode) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup8) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWHPC1ControlMode_AUTO := TRUE;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode := elit_auto;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Control_Mode_c_manual".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWHPC1ControlMode) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_auto));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup8) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWHPC1ControlMode_AUTO := FALSE;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode := elit_manual;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Control_Observer_c_done".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWHPC1ControlButtonAuto) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HWHPC1ControlButtonManual) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_HWHPC1ModeButtonDrain) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_HWHPC1ModeButtonOff) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_HWHPC1ModeButtonStore) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed);
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_auto));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup8) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWHPC1ControlButtonAuto_StopLoop := FALSE;
            state1.dvar_M_HWHPC1ControlButtonManual_StopLoop := FALSE;
            state1.dvar_M_HWHPC1ModeButtonDrain_StopLoop := FALSE;
            state1.dvar_M_HWHPC1ModeButtonOff_StopLoop := FALSE;
            state1.dvar_M_HWHPC1ModeButtonStore_StopLoop := FALSE;
            IF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_autoPressed)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_auto))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            ELSIF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_manualPressed)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            ELSIF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            ELSIF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            ELSIF (((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed)) AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off))) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer := elit_unpressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Mode_c_drain".
    IF NOT progress THEN
        b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store);
        b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off));
        b1 := b2;
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed);
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) &lt;&gt; (elit_autoPressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_auto);
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational));
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_drainPressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Mutex3Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_Mutex4Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup8) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_HWHPC1Mode) = (elit_drain)) THEN
                state1.dvar_M_HWHPC1Mode := elit_drain;
            ELSIF ((state0.dvar_M_HWHPC1Mode) = (elit_store)) THEN
                state1.dvar_M_HWHPC1Mode_DRAIN := TRUE;
                state1.dvar_M_HWHPC1Mode_STORE := FALSE;
                state1.dvar_M_HWHPC1Mode_OFF := FALSE;
                state1.dvar_M_HWHPC1Mode := elit_drain;
            ELSIF ((state0.dvar_M_HWHPC1Mode) = (elit_off)) THEN
                state1.dvar_M_HWHPC1Mode_DRAIN := TRUE;
                state1.dvar_M_HWHPC1Mode_STORE := FALSE;
                state1.dvar_M_HWHPC1Mode_OFF := FALSE;
                state1.dvar_M_HWHPC1Mode := elit_drain;
            END_IF;
            IF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Mode := elit_drain;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Mode := elit_drain;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Mode_c_off".
    IF NOT progress THEN
        b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain);
        b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store));
        b1 := b2;
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed);
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) &lt;&gt; (elit_autoPressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_offPressed));
        b1 := b1 AND ((state0.dvar_M_Mutex3Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_Mutex4Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup8) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_HWHPC1Mode) = (elit_drain)) THEN
                state1.dvar_M_HWHPC1Mode_DRAIN := FALSE;
                state1.dvar_M_HWHPC1Mode_STORE := FALSE;
                state1.dvar_M_HWHPC1Mode_OFF := TRUE;
                state1.dvar_M_HWHPC1Mode := elit_off;
            ELSIF ((state0.dvar_M_HWHPC1Mode) = (elit_store)) THEN
                state1.dvar_M_HWHPC1Mode_DRAIN := FALSE;
                state1.dvar_M_HWHPC1Mode_STORE := FALSE;
                state1.dvar_M_HWHPC1Mode_OFF := TRUE;
                state1.dvar_M_HWHPC1Mode := elit_off;
            ELSIF ((state0.dvar_M_HWHPC1Mode) = (elit_off)) THEN
                state1.dvar_M_HWHPC1Mode := elit_off;
            END_IF;
            IF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Mode := elit_off;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Mode := elit_off;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Mode_c_store".
    IF NOT progress THEN
        b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain);
        b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off));
        b1 := b2;
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed);
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) &lt;&gt; (elit_autoPressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_auto);
            b3 := b3 AND (NOT(((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational)) AND ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational))));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_storePressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Mutex3Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_Mutex4Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup8) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_HWHPC1Mode) = (elit_drain)) THEN
                state1.dvar_M_HWHPC1Mode_DRAIN := FALSE;
                state1.dvar_M_HWHPC1Mode_STORE := TRUE;
                state1.dvar_M_HWHPC1Mode_OFF := FALSE;
                state1.dvar_M_HWHPC1Mode := elit_store;
            ELSIF ((state0.dvar_M_HWHPC1Mode) = (elit_store)) THEN
                state1.dvar_M_HWHPC1Mode := elit_store;
            ELSIF ((state0.dvar_M_HWHPC1Mode) = (elit_off)) THEN
                state1.dvar_M_HWHPC1Mode_DRAIN := FALSE;
                state1.dvar_M_HWHPC1Mode_STORE := TRUE;
                state1.dvar_M_HWHPC1Mode_OFF := FALSE;
                state1.dvar_M_HWHPC1Mode := elit_store;
            END_IF;
            IF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Mode := elit_store;
            ELSIF ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off)) THEN
                state1.dvar_M_Pumpcellars_HeadPumpcellar1_Mode := elit_store;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Pump1_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWPump1) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1) = (elit_on));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store);
            IF b3 THEN
                b4 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S2);
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S3));
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S1));
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_Empty));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_Empty));
                b2 := b2 OR (b3);
            END_IF;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWPump1_ON := FALSE;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1 := elit_off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Pump1_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWPump1) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1) = (elit_off));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store);
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S5));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain);
                IF b3 THEN
                    b4 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S2);
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S3));
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S4));
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S5));
                    b3 := b3 AND (b4);
                END_IF;
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWPump1_ON := TRUE;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1 := elit_on;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Pump2_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWPump2) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2) = (elit_on));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store);
            IF b3 THEN
                b4 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S2);
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S3));
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S1));
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_Empty));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_Empty));
                b2 := b2 OR (b3);
            END_IF;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_off));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWPump2_ON := FALSE;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2 := elit_off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_Pump2_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWPump2) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2) = (elit_off));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_store);
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S5));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Mode) = (elit_drain);
                IF b3 THEN
                    b4 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S3);
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S4));
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S5));
                    b3 := b3 AND (b4);
                END_IF;
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Control_Observer) = (elit_unpressed));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWPump2_ON := TRUE;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2 := elit_on;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S1off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS1) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_HPC1_HWSensorS1_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S1));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS1 := elit_off;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_Empty;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S1on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS1) = (elit_off);
        b1 := b1 AND (ivar_M_HPC1_HWSensorS1_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_Empty));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS1 := elit_on;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_S1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S2off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS2) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_HPC1_HWSensorS2_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S2));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS2 := elit_off;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_S1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S2on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS2) = (elit_off);
        b1 := b1 AND (ivar_M_HPC1_HWSensorS2_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS2 := elit_on;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_S2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S3off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS3) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_HPC1_HWSensorS3_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S3));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS3 := elit_off;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_S2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S3on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS3) = (elit_off);
        b1 := b1 AND (ivar_M_HPC1_HWSensorS3_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S2));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS3 := elit_on;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_S3;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S4off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS4) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_HPC1_HWSensorS4_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S4));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS4 := elit_off;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_S3;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S4on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS4) = (elit_off);
        b1 := b1 AND (ivar_M_HPC1_HWSensorS4_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S3));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS4 := elit_on;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_S4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S5off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS5) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_HPC1_HWSensorS5_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S5));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS5 := elit_off;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_S4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_HeadPumpcellar1_SensorTank_u_S5on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HPC1_HWSensorS5) = (elit_off);
        b1 := b1 AND (ivar_M_HPC1_HWSensorS5_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S4));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HPC1_HWSensorS5 := elit_on;
            state1.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank := elit_S5;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Control_ButtonAuto_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMPCControlButtonAuto) = (elit_X);
        b1 := b1 AND (ivar_M_HWMPCControlButtonAuto_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWMPCControlButtonAuto_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonAuto) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b4 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual);
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) &lt;&gt; (elit_manual));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMPCControlButtonAuto_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_autoPressed;
            ELSIF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) &lt;&gt; (elit_manual))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Control_ButtonDrain_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMPCModeButtonDrain) = (elit_X);
        b1 := b1 AND (ivar_M_HWMPCModeButtonDrain_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWMPCModeButtonDrain_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonDrain) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b5 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual);
                b5 := b5 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_drain));
                b4 := b5;
                b4 := b4 OR (NOT(((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_drain))));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMPCModeButtonDrain_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_drain)))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_drainPressed;
            ELSIF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND (NOT(((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_drain))))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Control_ButtonManual_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMPCControlButtonManual) = (elit_X);
        b1 := b1 AND (ivar_M_HWMPCControlButtonManual_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWMPCControlButtonManual_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonManual) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b4 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_auto);
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) &lt;&gt; (elit_auto));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMPCControlButtonManual_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_auto))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_manualPressed;
            ELSIF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) &lt;&gt; (elit_auto))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Control_ButtonOff_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMPCModeButtonOff) = (elit_X);
        b1 := b1 AND (ivar_M_HWMPCModeButtonOff_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWMPCModeButtonOff_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonOff) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b5 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual);
                b5 := b5 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_off));
                b4 := b5;
                b4 := b4 OR (NOT(((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_off))));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMPCModeButtonOff_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_off)))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_offPressed;
            ELSIF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND (NOT(((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_off))))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Control_ButtonStore_u_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMPCModeButtonStore) = (elit_X);
        b1 := b1 AND (ivar_M_HWMPCModeButtonStore_PUSHED);
        b1 := b1 AND (NOT(state0.dvar_M_HWMPCModeButtonStore_StopLoop));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_ButtonStore) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed);
            IF b3 THEN
                b5 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual);
                b5 := b5 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_store));
                b4 := b5;
                b4 := b4 OR (NOT(((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_store))));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed));
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMPCModeButtonStore_StopLoop := TRUE;
            IF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_store)))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_storePressed;
            ELSIF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed)) AND (NOT(((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) &lt;&gt; (elit_store))))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_autoPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_manualPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_storePressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_drainPressed;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_offPressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Control_Mode_c_auto".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMPCControlMode) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup4) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMPCControlMode_AUTO := TRUE;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode := elit_auto;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Control_Mode_c_manual".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMPCControlMode) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_auto));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup4) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMPCControlMode_AUTO := FALSE;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode := elit_manual;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Control_Observer_c_done".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWMPCControlButtonAuto) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HWMPCControlButtonManual) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_HWMPCModeButtonDrain) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_HWMPCModeButtonOff) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_HWMPCModeButtonStore) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed);
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_auto));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup4) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HWMPCControlButtonAuto_StopLoop := FALSE;
            state1.dvar_M_HWMPCControlButtonManual_StopLoop := FALSE;
            state1.dvar_M_HWMPCModeButtonDrain_StopLoop := FALSE;
            state1.dvar_M_HWMPCModeButtonOff_StopLoop := FALSE;
            state1.dvar_M_HWMPCModeButtonStore_StopLoop := FALSE;
            IF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_autoPressed)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_auto))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            ELSIF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_manualPressed)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            ELSIF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            ELSIF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            ELSIF (((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed)) AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off))) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer := elit_unpressed;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Mode_c_drain".
    IF NOT progress THEN
        b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store);
        b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off));
        b1 := b2;
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed);
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) &lt;&gt; (elit_autoPressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_auto);
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational));
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_drainPressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Mutex1Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_Mutex2Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup4) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_HWMPCMode) = (elit_drain)) THEN
                state1.dvar_M_HWMPCMode := elit_drain;
            ELSIF ((state0.dvar_M_HWMPCMode) = (elit_store)) THEN
                state1.dvar_M_HWMPCMode_DRAIN := TRUE;
                state1.dvar_M_HWMPCMode_STORE := FALSE;
                state1.dvar_M_HWMPCMode_OFF := FALSE;
                state1.dvar_M_HWMPCMode := elit_drain;
            ELSIF ((state0.dvar_M_HWMPCMode) = (elit_off)) THEN
                state1.dvar_M_HWMPCMode_DRAIN := TRUE;
                state1.dvar_M_HWMPCMode_STORE := FALSE;
                state1.dvar_M_HWMPCMode_OFF := FALSE;
                state1.dvar_M_HWMPCMode := elit_drain;
            END_IF;
            IF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Mode := elit_drain;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Mode := elit_drain;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Mode_c_off".
    IF NOT progress THEN
        b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain);
        b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store));
        b1 := b2;
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed);
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) &lt;&gt; (elit_autoPressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_offPressed));
        b1 := b1 AND ((state0.dvar_M_Mutex1Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_Mutex2Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup4) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_HWMPCMode) = (elit_drain)) THEN
                state1.dvar_M_HWMPCMode_DRAIN := FALSE;
                state1.dvar_M_HWMPCMode_STORE := FALSE;
                state1.dvar_M_HWMPCMode_OFF := TRUE;
                state1.dvar_M_HWMPCMode := elit_off;
            ELSIF ((state0.dvar_M_HWMPCMode) = (elit_store)) THEN
                state1.dvar_M_HWMPCMode_DRAIN := FALSE;
                state1.dvar_M_HWMPCMode_STORE := FALSE;
                state1.dvar_M_HWMPCMode_OFF := TRUE;
                state1.dvar_M_HWMPCMode := elit_off;
            ELSIF ((state0.dvar_M_HWMPCMode) = (elit_off)) THEN
                state1.dvar_M_HWMPCMode := elit_off;
            END_IF;
            IF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Mode := elit_off;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Mode := elit_off;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Mode_c_store".
    IF NOT progress THEN
        b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain);
        b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off));
        b1 := b2;
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed);
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) &lt;&gt; (elit_autoPressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_auto);
            b3 := b3 AND (NOT(((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational)) AND ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational))));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Mode) = (elit_manual);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_storePressed));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Mutex1Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_Mutex2Home_TokenTracker) = (elit_Home));
        b1 := b1 AND ((state0.dvar_M_sup1a) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup4) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_HWMPCMode) = (elit_drain)) THEN
                state1.dvar_M_HWMPCMode_DRAIN := FALSE;
                state1.dvar_M_HWMPCMode_STORE := TRUE;
                state1.dvar_M_HWMPCMode_OFF := FALSE;
                state1.dvar_M_HWMPCMode := elit_store;
            ELSIF ((state0.dvar_M_HWMPCMode) = (elit_store)) THEN
                state1.dvar_M_HWMPCMode := elit_store;
            ELSIF ((state0.dvar_M_HWMPCMode) = (elit_off)) THEN
                state1.dvar_M_HWMPCMode_DRAIN := FALSE;
                state1.dvar_M_HWMPCMode_STORE := TRUE;
                state1.dvar_M_HWMPCMode_OFF := FALSE;
                state1.dvar_M_HWMPCMode := elit_store;
            END_IF;
            IF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Mode := elit_store;
            ELSIF ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off)) THEN
                state1.dvar_M_Pumpcellars_MiddlePumpcellar_Mode := elit_store;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_PompRichting_c_hoofdPumpcellars1".
    IF NOT progress THEN
        IF (state0.dvar_M_MPC_HWPomprichting) = (elit_X) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWPomprichting_HPC1 := TRUE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_PompRichting_c_hoofdPumpcellars2".
    IF NOT progress THEN
        IF (state0.dvar_M_MPC_HWPomprichting) = (elit_X) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWPomprichting_HPC1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Pump1_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWPump1) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1) = (elit_on));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store);
            IF b3 THEN
                b4 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S2);
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S3));
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S1));
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_Empty));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_Empty));
                b2 := b2 OR (b3);
            END_IF;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWPump1_ON := FALSE;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1 := elit_off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Pump1_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWPump1) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1) = (elit_off));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store);
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S5));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain);
                IF b3 THEN
                    b4 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S2);
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S3));
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S4));
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S5));
                    b3 := b3 AND (b4);
                END_IF;
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWPump1_ON := TRUE;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1 := elit_on;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Pump2_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWPump2) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2) = (elit_on));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store);
            IF b3 THEN
                b4 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S2);
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S3));
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S1));
                b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_Empty));
                b3 := b3 AND (b4);
            END_IF;
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain);
                b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_Empty));
                b2 := b2 OR (b3);
            END_IF;
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_off));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWPump2_ON := FALSE;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2 := elit_off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_Pump2_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWPump2) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2) = (elit_off));
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_store);
            b3 := b3 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S5));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Mode) = (elit_drain);
                IF b3 THEN
                    b4 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S3);
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S4));
                    b4 := b4 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S5));
                    b3 := b3 AND (b4);
                END_IF;
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Control_Observer) = (elit_unpressed));
        b1 := b1 AND ((state0.dvar_M_sup2) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWPump2_ON := TRUE;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2 := elit_on;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_PumpDirection_c_headPumpcellar1".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_PumpDirection) = (elit_headPumpcellar2);
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S4));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Pumpcellars_MiddlePumpcellar_PumpDirection := elit_headPumpcellar1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_PumpDirection_c_headPumpcellar2".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_PumpDirection) = (elit_headPumpcellar1);
        b1 := b1 AND ((state0.dvar_M_RequirementStateEvtExcls) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_HeadPumpcellar1_SensorTank) = (elit_S5));
        b1 := b1 AND ((state0.dvar_M_sup5) = (elit_X));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Pumpcellars_MiddlePumpcellar_PumpDirection := elit_headPumpcellar2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S1off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS1) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_MPC_HWSensorS1_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S1));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS1 := elit_off;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_Empty;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S1on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS1) = (elit_off);
        b1 := b1 AND (ivar_M_MPC_HWSensorS1_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_Empty));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS1 := elit_on;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_S1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S2off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS2) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_MPC_HWSensorS2_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S2));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS2 := elit_off;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_S1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S2on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS2) = (elit_off);
        b1 := b1 AND (ivar_M_MPC_HWSensorS2_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS2 := elit_on;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_S2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S3off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS3) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_MPC_HWSensorS3_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S3));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS3 := elit_off;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_S2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S3on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS3) = (elit_off);
        b1 := b1 AND (ivar_M_MPC_HWSensorS3_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S2));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS3 := elit_on;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_S3;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S4off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS4) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_MPC_HWSensorS4_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S4));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS4 := elit_off;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_S3;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S4on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS4) = (elit_off);
        b1 := b1 AND (ivar_M_MPC_HWSensorS4_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S3));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS4 := elit_on;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_S4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S5off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS5) = (elit_on);
        b1 := b1 AND (NOT(ivar_M_MPC_HWSensorS5_ON));
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S5));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump1) = (elit_on);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_Pump2) = (elit_on));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS5 := elit_off;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_S4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_MiddlePumpcellar_SensorTank_u_S5on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_MPC_HWSensorS5) = (elit_off);
        b1 := b1 AND (ivar_M_MPC_HWSensorS5_ON);
        b1 := b1 AND ((state0.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank) = (elit_S4));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_MPC_HWSensorS5 := elit_on;
            state1.dvar_M_Pumpcellars_MiddlePumpcellar_SensorTank := elit_S5;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_Traffictube1_Observer_c_emergency".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWModeTraffictube1Observer) = (elit_X);
        b1 := b1 AND (ivar_TT1EMERGENCY);
        b1 := b1 AND (NOT(ivar_TT1OPERATIONAL));
        b1 := b1 AND (NOT(ivar_TT1RECOVERY));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_recovery));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational)) THEN
                state1.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer := elit_emergency;
            ELSIF ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_recovery)) THEN
                state1.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer := elit_emergency;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_Traffictube1_Observer_c_operational".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWModeTraffictube1Observer) = (elit_X);
        b1 := b1 AND (NOT(ivar_TT1EMERGENCY));
        b1 := b1 AND (ivar_TT1OPERATIONAL);
        b1 := b1 AND (NOT(ivar_TT1RECOVERY));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_emergency);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_recovery));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_emergency)) THEN
                state1.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer := elit_operational;
            ELSIF ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_recovery)) THEN
                state1.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer := elit_operational;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_Traffictube1_Observer_c_recovery".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWModeTraffictube1Observer) = (elit_X);
        b1 := b1 AND (NOT(ivar_TT1EMERGENCY));
        b1 := b1 AND (NOT(ivar_TT1OPERATIONAL));
        b1 := b1 AND (ivar_TT1RECOVERY);
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_emergency));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_operational)) THEN
                state1.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer := elit_recovery;
            ELSIF ((state0.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer) = (elit_emergency)) THEN
                state1.dvar_M_Pumpcellars_Traffictube1_ModeTraffictube_Observer := elit_recovery;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_Traffictube2_Observer_c_emergency".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWModeTraffictube2Observer) = (elit_X);
        b1 := b1 AND (ivar_TT2EMERGENCY);
        b1 := b1 AND (NOT(ivar_TT2OPERATIONAL));
        b1 := b1 AND (NOT(ivar_TT2RECOVERY));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_recovery));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational)) THEN
                state1.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer := elit_emergency;
            ELSIF ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_recovery)) THEN
                state1.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer := elit_emergency;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_Traffictube2_Observer_c_operational".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWModeTraffictube2Observer) = (elit_X);
        b1 := b1 AND (NOT(ivar_TT2EMERGENCY));
        b1 := b1 AND (ivar_TT2OPERATIONAL);
        b1 := b1 AND (NOT(ivar_TT2RECOVERY));
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_emergency);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_recovery));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_emergency)) THEN
                state1.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer := elit_operational;
            ELSIF ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_recovery)) THEN
                state1.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer := elit_operational;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Pumpcellars_Traffictube2_Observer_c_recovery".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HWModeTraffictube2Observer) = (elit_X);
        b1 := b1 AND (NOT(ivar_TT2EMERGENCY));
        b1 := b1 AND (NOT(ivar_TT2OPERATIONAL));
        b1 := b1 AND (ivar_TT2RECOVERY);
        IF b1 THEN
            b2 := (state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational);
            b2 := b2 OR ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_emergency));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_operational)) THEN
                state1.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer := elit_recovery;
            ELSIF ((state0.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer) = (elit_emergency)) THEN
                state1.dvar_M_Pumpcellars_Traffictube2_ModeTraffictube_Observer := elit_recovery;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Done with events?
    IF NOT progress THEN
        EXIT;
    END_IF;

    // Protect against events that are always enabled.
    loopCount := loopCount + 1;
    IF loopCount &gt;= 100 THEN
        loopsKilled := loopsKilled + 1;
        EXIT;
    END_IF;
END_WHILE;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="config">
        <resource name="Untitled1">
          <task interval="t#10ms" name="PlcTask" priority="20">
            <pouInstance name="MAIN" typeName="MAIN"/>
          </task>
          <globalVars constant="false" name="INPUTS">
            <variable address="%I*" name="ivar_Mutex1Home_R2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_Mutex2Home_R2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_Mutex3Home_R2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_Mutex4Home_R2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_TT1EMERGENCY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_TT1RECOVERY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_TT1OPERATIONAL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_TT2EMERGENCY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_TT2RECOVERY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_TT2OPERATIONAL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HPC1_HWSensorS1_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HPC1_HWSensorS2_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HPC1_HWSensorS3_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HPC1_HWSensorS4_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HPC1_HWSensorS5_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWHPC1ControlButtonAuto_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWHPC1ControlButtonManual_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWHPC1ModeButtonDrain_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWHPC1ModeButtonOff_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWHPC1ModeButtonStore_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMPCControlButtonAuto_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMPCControlButtonManual_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMPCModeButtonDrain_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMPCModeButtonOff_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMPCModeButtonStore_PUSHED">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMutex1_There">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMutex1_SendingHere">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMutex2_There">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMutex2_SendingHere">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMutex3_There">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMutex3_SendingHere">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMutex4_There">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_HWMutex4_SendingHere">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_MPC_HWSensorS1_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_MPC_HWSensorS2_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_MPC_HWSensorS3_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_MPC_HWSensorS4_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_M_MPC_HWSensorS5_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
          </globalVars>
          <globalVars constant="false" name="TIMERS">
            <variable name="timer0">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="timer1">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="curTimer">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
